# Hexadecimal to binary conversion 

mpa = {
"00000000":"0",
"00000001":"1",
"00000010":"2",
"00000011":"3",
"00000100":"4",
"00000101":"5",
"00000110":"6",
"00000111":"7",
"00001000":"8",
"00001001":"9",
"00001010":"A",
"00001011":"B",
"00001100":"C",
"00001110":"D",
"00001111":"E",
"00010000":"F",
"00010001":"G",
"00010010":"H",
"00010011":"I",
"00010100":"J",
"00010101":"K",
"00010110":"L",
"00010111":"M",
"00011000":"N",
"00011001":"O",
"00011010":"P",
"00011011":"Q",
"00011100":"R",
"00011101":"S",
"00011110":"T",
"00011111":"U",
"00100000":"V",
"00100001":"W",
"00100010":"X",
"00100011":"Y",
"00100100":"Z",
"00100101":"a",
"00100110":"b",
"00100111":"c",
"00101000":"d",
"00101001":"e",
"00101010":"f",
"00101011":"g",
"00101100":"h",
"00101101":"i",
"00101110":"j",
"00101111":"k",
"00110000":"l",
"00110001":"m",
"00110010":"n",
"00110011":"o",
"00110100":"p",
"00110101":"q",
"00110110":"r",
"00110111":"s",
"00111000":"t",
"00111010":"u",
"00111011":"v",
"00111100":"w",
"00111101":"x",
"00111111":"y",
"01000000":"z",
"01000001":"{",
"01000010":"}",
"01000011":"[",
"01000100":"]",
"01000110":":",
"01000111":";",
"01001000":",",
"01001001":"!",
"01001010":"@",
"01001011":"#",
"01001100":"$",
"01001101":"%",
"01001110":"^",
"01001111":"&00",
"01010000":"*",
"01010010":"&99",
"01010001":"(",
"01010011":')',
"01010100":'-',
"01010101":'_',
"01010110":'+',
"01010111":'=',
"01011000":'?',
"01011001":'&01',
"01011010":'|',
"01011011":'.0',
"01011100":'.1',
"01011101":'.2',
"01011110":'.3',
"01011111":'.4',
"01100000":'.5',
"01100001":'.6',
"01100010":'.7',
"01100011":'.8',
"01100100":'.9',
"01100101":'.A',
"01100110":'.B',
"01100111":'.C',
"01101000":'.D',
"01101001":'.E',
"01101010":'.F',
"01101011":'.G',
"01101100":'.H',
"01101101":'.I',
"01101110":'.J',
"01101111":'.K',
"01110000":'.L',
"01110001":'.M',
"01110010":'.N',
"01110011":'.O',
"01110100":'.P',
"01110101":'.Q',
"01110110":'.R',
"01110111":'.S',
"01111000":'.T',
"01111001":'.U',
"01111010":'.V',
"01111011":'.Q',
"01111100":'.R',
"01111101":'.S',
"01111110":'.T',
"01111111":'.U',
"10000000":'.V',
"10000001":'.W',
"10000010":'.X',
"10000011":'.Y',
"10000100":'.Z',
"10000101":'.a',
"10000110":'.b',
"10000111":'.c',
"10001000":'.d',
"10001001":'.e',
"10001010":'.f',
"10001011":'.g',
"10001100":'.h',
"10001101":'.i',
"10001110":'.j',
"10001111":'.k',
"10010000":'.l',
"10010001":'.m',
"10010010":'.n',
"10010011":'.o',
"10010100":'.p',
"10010101":'.q',
"10010110":'.r',
"10010111":'.s',
"10011000":'.t',
"10011001":'.u',
"10011010":'.v',
"10011011":'.w',
"10011100":'.x',
"10011101":'.y',
"10011110":'.z',
"10011111":'.{',
"10100000":'.}',
"10100001":'.[',
"10100010":'.]',
"10100011":'.|',
"10100100":'.!',
"10100101":'.@',
"10100110":'.#',
"10100111":'.$',
"10101000":'.%',
"10101001":'.^',
"10101010":'.*',
"10101011":'.(',
"10101100":'.)',
"10101101":'.-',
"10101110":'._',
"10101111":'.+',
"10110000":'.+',
"10110001":'.;',
"10110010":'.:',
"10110011":'.,',
"10110100":'.?',
"10110101":'&02',
"10110110":'&03',
"10110111":'&04',
"10111000":'&05',
"10111001":'&06',
"10111010":'&07',
"10111011":'&08',
"10111100":'&09',
"10111101":'&0A',
"10111110":'&0B',
"10111111":'&0C',
"11000000":'&0D',
"11000001":'&0E',
"11000010":'&0F',
"11000011":'&0G',
"11000100":'&0H',
"11000101":'&0I',
"11000110":'&0J',
"11000111":'&0K',
"11001000":'&11',
"11001001":'&12',
"11001010":'&13',
"11001011":'&14',
"11001100":'&15',
"11001101":'&16',
"11001110":'&17',
"11001111":'&18',
"11010000":'&19',
"11010001":'&20',
"11010010":'&21',
"11010011":'&22',
"11010100":'&23',
"11010101":'&24',
"11010110":'&25',
"11010111":'&26',
"11011000":'&27',
"11011001":'&28',
"11011010":'&29',
"11011011":'&30',
"11011100":'&31',
"11011101":'&32',
"11011110":'&33',
"11011111":'&34',
"11100000":'&35',
"11100001":'&36',
"11100010":'&37',
"11100011":'&38',
"11100100":'&39',
"11100101":'&40',
"11100110":'&41',
"11100111":'&42',
"11101000":'&43',
"11101001":'&44',
"11101010":'&45',
"11101011":'&46',
"11101100":'&47',
"11101101":'&48',
"11101110":'&49',
"11101111":'&50',
"11110000":'&51',
"11110001":'&52',
"11110010":'&53',
"11110011":'&54',
"11110100":'&55',
"11110101":'&56',
"11110110":'&57',
"11110111":'&58',
"11111000":'&59',
"11111001":'&60',
"11111010":'&61',
"11111011":'&62',
"11111100":'&63',
"11111101":'&64',
"11111110":'&65',
"11111111":'&66',
"00111001":"&67",
"00001101":"&68",
"01000101":"&69",
"00111110":"&90",
}
#print("Hey"+str(len(mpa)))
mpb={
"&69":"01000101",
"&68":"00001101",
"&67":"00111001",
"&99":"01010010",
"0":"00000000",
"1":"00000001",
"2":"00000010",
"3":"00000011",
"4":"00000100",
"5":"00000101",
"6":"00000110",
"7":"00000111",
"8":"00001000",
"9":"00001001",
"A":"00001010",
"B":"00001011",
"C":"00001100",
"D":"00001110",
"E":"00001111",
"F":"00010000",
"G":"00010001",
"H":"00010010",
"I":"00010011",
"J":"00010100",
"K":"00010101",
"L":"00010110",
"M":"00010111",
"N":"00011000",
"O":"00011001",
"P":"00011010",
"Q":"00011011",
"R":"00011100",
"S":"00011101",
"T":"00011110",
"U":"00011111",
"V":"00100000",
"W":"00100001",
"X":"00100010",
"Y":"00100011",
"Z":"00100100",
"a":"00100101",
"b":"00100110",
"c":"00100111",
"d":"00101000",
"e":"00101001",
"f":"00101010",
"g":"00101011",
"h":"00101100",
"i":"00101101",
"j":"00101110",
"k":"00101111",
"l":"00110000",
"m":"00110001",
"n":"00110010",
"o":"00110011",
"p":"00110100",
"q":"00110101",
"r":"00110110",
"s":"00110111",
"t":"00111000",
"u":"00111010",
"v":"00111011",
"w":"00111100",
"x":"00111101",
"y":"00111111",
"z":"01000000",
"{":"01000001",
"}":"01000010",
"[":"01000011",
"]":"01000100",
":":"01000110",
";":"01000111",
",":"01001000",
"!":"01001001",
"@":"01001010",
"#":"01001011",
"$":"01001100",
"%":"01001101",
"^":"01001110",
"&00":"01001111",
"*":"01010000",
"(":"01010001",
")":"01010011",
"-":"01010100",
"_":"01010101",
"+":"01010110",
"=":"01010111",
"?":"01011000",
"&01":"01011001",
"|":"01011010",
".0":"01011011",
".1":"01011100",
".2":"01011101",
".3":"01011110",
".4":"01011111",
".5":"01100000",
".6":"01100001",
".7":"01100010",
".8":"01100011",
".9":"01100100",
".A":"01100101",
".B":"01100110",
".C":"01100111",
".D":"01101000",
".E":"01101001",
".F":"01101010",
".G":"01101011",
".H":"01101100",
".I":"01101101",
".J":"01101110",
".K":"01101111",
".L":"01110000",
".M":"01110001",
".N":"01110010",
".O":"01110011",
".P":"01110100",
".Q":"01110101",
".R":"01110110",
".S":"01110111",
".T":"01111000",
".U":"01111001",
".V":"01111010",
".Q":"01111011",
".R":"01111100",
".S":"01111101",
".T":"01111110",
".U":"01111111",
".V":"10000000",
".W":"10000001",
".X":"10000010",
".Y":"10000011",
".Z":"10000100",
".a":"10000101",
".b":"10000110",
".c":"10000111",
".d":"10001000",
".e":"10001001",
".f":"10001010",
".g":"10001011",
".h":"10001100",
".i":"10001101",
".j":"10001110",
".k":"10001111",
".l":"10010000",
".m":"10010001",
".n":"10010010",
".o":"10010011",
".p":"10010100",
".q":"10010101",
".r":"10010110",
".s":"10010111",
".t":"10011000",
".u":"10011001",
".v":"10011010",
".w":"10011011",
".x":"10011100",
".y":"10011101",
".z":"10011110",
".{":"10011111",
".}":"10100000",
".[":"10100001",
".]":"10100010",
".|":"10100011",
".!":"10100100",
".@":"10100101",
".#":"10100110",
".$":"10100111",
".%":"10101000",
".^":"10101001",
".*":"10101010",
".(":"10101011",
".)":"10101100",
".-":"10101101",
"._":"10101110",
".+":"10101111",
".+":"10110000",
".;":"10110001",
".:":"10110010",
".,":"10110011",
".?":"10110100",
"&02":"10110101",
"&03":"10110110",
"&04":"10110111",
"&05":"10111000",
"&06":"10111001",
"&07":"10111010",
"&08":"10111011",
"&09":"10111100",
"&0A":"10111101",
"&0B":"10111110",
"&0C":"10111111",
"&0D":"11000000",
"&0E":"11000001",
"&0F":"11000010",
"&0G":"11000011",
"&0H":"11000100",
"&0I":"11000101",
"&0J":"11000110",
"&0K":"11000111",
"&11":"11001000",
"&12":"11001001",
"&13":"11001010",
"&14":"11001011",
"&15":"11001100",
"&16":"11001101",
"&17":"11001110",
"&18":"11001111",
"&19":"11010000",
"&20":"11010001",
"&21":"11010010",
"&22":"11010011",
"&23":"11010100",
"&24":"11010101",
"&25":"11010110",
"&26":"11010111",
"&27":"11011000",
"&28":"11011001",
"&29":"11011010",
"&30":"11011011",
"&31":"11011100",
"&32":"11011101",
"&33":"11011110",
"&34":"11011111",
"&35":"11100000",
"&36":"11100001",
"&37":"11100010",
"&38":"11100011",
"&39":"11100100",
"&40":"11100101",
"&41":"11100110",
"&42":"11100111",
"&43":"11101000",
"&44":"11101001",
"&45":"11101010",
"&46":"11101011",
"&47":"11101100",
"&48":"11101101",
"&49":"11101110",
"&50":"11101111",
"&51":"11110000",
"&52":"11110001",
"&53":"11110010",
"&54":"11110011",
"&55":"11110100",
"&56":"11110101",
"&57":"11110110",
"&58":"11110111",
"&59":"11111000",
"&60":"11111001",
"&61":"11111010",
"&62":"11111011",
"&63":"11111100",
"&64":"11111101",
"&65":"11111110",
"&66":"11111111",
"&90":"00111110",
}


def char2bin(s): 
	print(s)
	bin = "" 
	i=0
	while(i<len(s)):
		print(s[i])
		if s[i]=='.':
			a=s[i]+s[i+1]
			i=i+2
			bin = bin + mpb[a]
		elif s[i]=='&':
			a=s[i]+s[i+1]+s[i+2]
			i=i+3
			bin =bin + mpb[a]
		else:
			bin=bin+mpb[s[i]]
			i=i+1
		print(bin)
					 
	return bin
	
# Binary to hexadecimal conversion 
def bin2char(s): 
	hex = "" 
	print(s)
	print(len(s))
	for i in range(0,len(s),8): 
		ch = "" 
		ch = ch + s[i + 0] 
		ch = ch + s[i + 1] 
		ch = ch + s[i + 2] 
		ch = ch + s[i + 3] 
		ch = ch + s[i + 4] 
		ch = ch + s[i + 5]  
		ch= ch+s[i+6]
		ch=ch+s[i+7]
		print(ch)	
		hex = hex + mpa[ch] 
		
	return hex

# Binary to decimal conversion 
def bin2dec(binary): 
		
	binary1 = binary 
	decimal, i, n = 0, 0, 0
	while(binary != 0): 
		dec = binary % 10
		decimal = decimal + dec * pow(2, i) 
		binary = binary//10
		i += 1
	return decimal 

# Decimal to binary conversion 
def dec2bin(num): 
	res = bin(num).replace("0b", "") 
	if(len(res)%4 != 0): 
		div = len(res) / 4
		div = int(div) 
		counter =(4 * (div + 1)) - len(res) 
		for i in range(0, counter): 
			res = '0' + res 
	return res 

# Permute function to rearrange the bits 
def permute(k, arr, n): 
	permutation = ""
	#print(k) 
	for i in range(0, n): 
		permutation = permutation + k[arr[i] - 1] 
	return permutation 

# shifting the bits towards left by nth shifts 
def shift_left(k, nth_shifts): 
	s = "" 
	for i in range(nth_shifts): 
		for j in range(1,len(k)): 
			s = s + k[j] 
		s = s + k[0] 
		k = s 
		s = "" 
	return k	 

# calculating xow of two strings of binary number a and b 
def xor(a, b): 
	ans = "" 
	for i in range(len(a)): 
		if a[i] == b[i]: 
			ans = ans + "0"
		else: 
			ans = ans + "1"
	return ans 

# Table of Position of 64 bits at initail level: Initial Permutation Table 
initial_perm = [58, 50, 42, 34, 26, 18, 10, 2, 
				60, 52, 44, 36, 28, 20, 12, 4, 
				62, 54, 46, 38, 30, 22, 14, 6, 
				64, 56, 48, 40, 32, 24, 16, 8, 
				57, 49, 41, 33, 25, 17, 9, 1, 
				59, 51, 43, 35, 27, 19, 11, 3, 
				61, 53, 45, 37, 29, 21, 13, 5, 
				63, 55, 47, 39, 31, 23, 15, 7] 

# Expansion D-box Table 
exp_d = [32, 1 , 2 , 3 , 4 , 5 , 4 , 5, 
		6 , 7 , 8 , 9 , 8 , 9 , 10, 11, 
		12, 13, 12, 13, 14, 15, 16, 17, 
		16, 17, 18, 19, 20, 21, 20, 21, 
		22, 23, 24, 25, 24, 25, 26, 27, 
		28, 29, 28, 29, 30, 31, 32, 1 ] 

# Straight Permutaion Table 
per = [ 16, 7, 20, 21, 
		29, 12, 28, 17, 
		1, 15, 23, 26, 
		5, 18, 31, 10, 
		2, 8, 24, 14, 
		32, 27, 3, 9, 
		19, 13, 30, 6, 
		22, 11, 4, 25 ] 

# S-box Table 
sbox = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], 
		[ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], 
		[ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], 
		[15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 ]], 
			
		[[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], 
			[3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], 
			[0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], 
		[13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 ]], 
	
		[ [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], 
		[13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], 
		[13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], 
			[1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 ]], 
		
		[ [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], 
		[13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], 
		[10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], 
			[3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14] ], 
		
		[ [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], 
		[14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], 
			[4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], 
		[11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 ]], 
		
		[ [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], 
		[10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], 
			[9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], 
			[4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13] ], 
		
		[ [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], 
		[13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], 
			[1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], 
			[6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12] ], 
		
		[ [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], 
			[1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], 
			[7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], 
			[2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11] ] ] 
	
# Final Permutaion Table 
final_perm = [ 40, 8, 48, 16, 56, 24, 64, 32, 
			39, 7, 47, 15, 55, 23, 63, 31, 
			38, 6, 46, 14, 54, 22, 62, 30, 
			37, 5, 45, 13, 53, 21, 61, 29, 
			36, 4, 44, 12, 52, 20, 60, 28, 
			35, 3, 43, 11, 51, 19, 59, 27, 
			34, 2, 42, 10, 50, 18, 58, 26, 
			33, 1, 41, 9, 49, 17, 57, 25 ] 

def encrypt(pt, rkb, rk): 
	pt = char2bin(pt) 
	
	# Initial Permutation 
	pt = permute(pt, initial_perm, 64) 
	#print("After inital permutation", bin2char(pt)) 
	
	# Splitting 
	left = pt[0:32] 
	right = pt[32:64] 
	for i in range(0, 16): 
		# Expansion D-box: Expanding the 32 bits data into 48 bits 
		right_expanded = permute(right, exp_d, 48) 
		
		# XOR RoundKey[i] and right_expanded 
		xor_x = xor(right_expanded, rkb[i]) 

		# S-boxex: substituting the value from s-box table by calculating row and column 
		sbox_str = "" 
		for j in range(0, 8): 
			row = bin2dec(int(xor_x[j * 6] + xor_x[j * 6 + 5])) 
			col = bin2dec(int(xor_x[j * 6 + 1] + xor_x[j * 6 + 2] + xor_x[j * 6 + 3] + xor_x[j * 6 + 4])) 
			val = sbox[j][row][col] 
			sbox_str = sbox_str + dec2bin(val) 
			
		# Straight D-box: After substituting rearranging the bits 
		sbox_str = permute(sbox_str, per, 32) 
		
		# XOR left and sbox_str 
		result = xor(left, sbox_str) 
		left = result 
		
		# Swapper 
		if(i != 15): 
			left, right = right, left 
		#print("Round ", i + 1, " ", bin2char(left), " ", bin2char(right), " ", rk[i]) 
	
	# Combination 
	combine = left + right 
	
	# Final permutaion: final rearranging of bits to get cipher text 
	cipher_text = permute(combine, final_perm, 64) 
	return cipher_text 

pt = "vishwakarma_university"
key = "vu123456"
d=len(key)
em=d%8
if em!=0:
	i=0
	while(i<8-em):
		key=key+str(i+1)
		i=i+1

# Key generation 
# --hex to binary 
print(key)
key = char2bin(key) 
print(key)
# --parity bit drop table 
keyp = [57, 49, 41, 33, 25, 17, 9, 
		1, 58, 50, 42, 34, 26, 18, 
		10, 2, 59, 51, 43, 35, 27, 
		19, 11, 3, 60, 52, 44, 36, 
		63, 55, 47, 39, 31, 23, 15, 
		7, 62, 54, 46, 38, 30, 22, 
		14, 6, 61, 53, 45, 37, 29, 
		21, 13, 5, 28, 20, 12, 4 ] 

# getting 56 bit key from 64 bit using the parity bits 
key = permute(key, keyp, 56) 
print(key)
# Number of bit shifts 
shift_table = [1, 1, 2, 2, 
				2, 2, 2, 2, 
				1, 2, 2, 2, 
				2, 2, 2, 1 ] 

# Key- Compression Table : Compression of key from 56 bits to 48 bits 
key_comp = [14, 17, 11, 24, 1, 5, 
			3, 28, 15, 6, 21, 10, 
			23, 19, 12, 4, 26, 8, 
			16, 7, 27, 20, 13, 2, 
			41, 52, 31, 37, 47, 55, 
			30, 40, 51, 45, 33, 48, 
			44, 49, 39, 56, 34, 53, 
			46, 42, 50, 36, 29, 32 ] 

# Splitting 
left = key[0:28] # rkb for RoundKeys in binary 
right = key[28:56] # rk for RoundKeys in hexadecimal 

rkb = [] 
rk = [] 
for i in range(0, 16): 
	# Shifting the bits by nth shifts by checking from shift table 
	left = shift_left(left, shift_table[i]) 
	right = shift_left(right, shift_table[i]) 
	
	# Combination of left and right string 
	combine_str = left + right 
	
	# Compression of key from 56 to 48 bits 
	round_key = permute(combine_str, key_comp, 48) 

	rkb.append(round_key) 
	rk.append(bin2char(round_key)) 

print("Encryption")
b=len(pt)
rem=b%8
if rem!=0:
	pt=pt+"a"*(8-rem)
cipher_text=""
for i in range(0,len(pt),8): 
	ch = "" 
	ch = ch + pt[i + 0] 
	ch = ch + pt[i + 1] 
	ch = ch + pt[i + 2] 
	ch = ch + pt[i + 3] 
	ch = ch +pt[i + 4] 
	ch = ch + pt[i + 5]  
	ch= ch+pt[i+6]
	ch=ch+pt[i+7]
	#print(ch)
	cipher_text =cipher_text+bin2char(encrypt(ch, rkb, rk)) 

print("Cipher Text : ",cipher_text) 


print("Decryption") 
rkb_rev = rkb[::-1] 
rk_rev = rk[::-1] 
text=""
bi="" 
i=0
lent=0
while(i<len(cipher_text)):
	if cipher_text[i]=='.':
		bi=bi+cipher_text[i]+cipher_text[i+1]
		i=i+2
		lent=lent+1
	elif cipher_text[i]=='&':
		bi=bi+cipher_text[i]+cipher_text[i+1]+cipher_text[i+2]
		i=i+3
		lent=lent+1
	else:
		bi=bi+cipher_text[i]
		i=i+1
		lent=lent+1
	#print(bi)
	#print(str(lent))
	if(lent==8):
		#print(bin)
		text =text+bin2char(encrypt(bi, rkb_rev, rk_rev))
		#print(text)
		bi=""
		lent=0 
f=""
for i in range(0,b):
	f=f+text[i]
print("Plain Text : ",f) 



